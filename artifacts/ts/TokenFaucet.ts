/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenFaucetContractJson } from "../TokenFaucet.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TokenFaucetTypes {
  export type Fields = {
    symbol: HexString;
    name: HexString;
    decimals: bigint;
    contractId: HexString;
    owner: Address;
    totalsupply: bigint;
    accumulatedinterest: bigint;
    lastblocktimestamp: bigint;
    issuedtokens: bigint;
    balanceofTokens: bigint;
    utilization: bigint;
    targetutilization: bigint;
    baseborrowrate: bigint;
    tokenSharesTemplateId: HexString;
    tokenSharesBalanceTemplateId: HexString;
    totalProtocolFee: bigint;
    protocolFeePercent: bigint;
    subjectFeePercent: bigint;
  };

  export type State = ContractState<Fields>;

  export type WithdrawEvent = ContractEvent<{ to: Address; amount: bigint }>;
  export type DepositEvent = ContractEvent<{ from: Address; amount: bigint }>;
  export type TradeEvent = ContractEvent<{
    trader: Address;
    tokencurrency: Address;
    isBuy: boolean;
    shareAmount: bigint;
    alphAmount: bigint;
    protocolAlphAmount: bigint;
    subjectAlphAmount: bigint;
    supply: bigint;
  }>;
  export type OwnerUpdatedEvent = ContractEvent<{
    previous: Address;
    new: Address;
  }>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBalanceofTokens: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getSelfContractId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDeployedContractID: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getSelfTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getSelfAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getTargetUtilization: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBaseBorrowRate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getIssuedTokens: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getUtilization: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getInterest: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBlockTimeStamp: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAccruedInterest: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getLastBlockTimeStamp: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getPrice: {
      params: CallContractParams<{ supply: bigint; amount: bigint }>;
      result: CallContractResult<bigint>;
    };
    getBuyPrice: {
      params: CallContractParams<{ tokenShares: Address; amount: bigint }>;
      result: CallContractResult<bigint>;
    };
    getSellPrice: {
      params: CallContractParams<{ tokenShares: Address; amount: bigint }>;
      result: CallContractResult<bigint>;
    };
    getSupply: {
      params: CallContractParams<{ tokenShares: Address }>;
      result: CallContractResult<bigint>;
    };
    getBalance: {
      params: CallContractParams<{ tokenShares: Address; holder: Address }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  TokenFaucetInstance,
  TokenFaucetTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as TokenFaucetTypes.Fields;
  }

  eventIndex = { Withdraw: 0, Deposit: 1, Trade: 2, OwnerUpdated: 3 };
  consts = {
    ErrorCodes: {
      InvalidWithdrawAmount: BigInt(0),
      OwnerAllowedOnly: BigInt(2),
      TokenAllowedFirstShareOnly: BigInt(3),
      InsufficientShares: BigInt(4),
      NoShareForTheSubject: BigInt(5),
      CanNotSellLastShare: BigInt(6),
    },
  };

  at(address: string): TokenFaucetInstance {
    return new TokenFaucetInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSymbol", params);
    },
    getName: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    getDecimals: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTotalSupply", params);
    },
    getBalanceofTokens: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBalanceofTokens", params);
    },
    getSelfContractId: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSelfContractId", params);
    },
    getDeployedContractID: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getDeployedContractID", params);
    },
    getSelfTokenId: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSelfTokenId", params);
    },
    getSelfAddress: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getSelfAddress", params);
    },
    getTargetUtilization: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTargetUtilization", params);
    },
    getBaseBorrowRate: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBaseBorrowRate", params);
    },
    getIssuedTokens: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getIssuedTokens", params);
    },
    updateOwner: async (
      params: TestContractParams<TokenFaucetTypes.Fields, { newOwner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateOwner", params);
    },
    getUtilization: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getUtilization", params);
    },
    setBaseBorrowRate: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { feePercent: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setBaseBorrowRate", params);
    },
    setTargetUtilization: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { targetPercent: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setTargetUtilization", params);
    },
    getInterest: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getInterest", params);
    },
    getBlockTimeStamp: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBlockTimeStamp", params);
    },
    getAccruedInterest: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAccruedInterest", params);
    },
    getLastBlockTimeStamp: async (
      params: Omit<
        TestContractParams<TokenFaucetTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getLastBlockTimeStamp", params);
    },
    withdraw: async (
      params: TestContractParams<TokenFaucetTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
    deposit: async (
      params: TestContractParams<TokenFaucetTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "deposit", params);
    },
    setProtocolFeePercent: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { feePercent: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setProtocolFeePercent", params);
    },
    setSubjectFeePercent: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { feePercent: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setSubjectFeePercent", params);
    },
    getPrice: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { supply: bigint; amount: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getPrice", params);
    },
    getBuyPrice: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { tokenShares: Address; amount: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBuyPrice", params);
    },
    getSellPrice: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { tokenShares: Address; amount: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getSellPrice", params);
    },
    getSupply: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { tokenShares: Address }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getSupply", params);
    },
    getBalance: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { tokenShares: Address; holder: Address }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBalance", params);
    },
    buyShares: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { tokenShares: Address; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "buyShares", params);
    },
    sellShares: async (
      params: TestContractParams<
        TokenFaucetTypes.Fields,
        { tokenShares: Address; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "sellShares", params);
    },
    withdrawProtocolFee: async (
      params: TestContractParams<TokenFaucetTypes.Fields, { to: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawProtocolFee", params);
    },
  };
}

// Use this object to test and deploy the contract
export const TokenFaucet = new Factory(
  Contract.fromJson(
    TokenFaucetContractJson,
    "=82-2+f5=2-2=1-3+8=2-2+58=2-1+6=3-3+d=1-2=2-2+e1=3-1+3=2-1+0=2-2+32=2+3f8=1+48=1-1+4499=843+ea0047e02175468652063757272656e742062616=1+616e63652069732000=111+c=1+0047e02175468652063757272656e742062616c616e63652069732000=1282",
    "6266d5e0be5192f755a98dd9873dbdc21e9455c5a95a9ce685e2dddaee2bdd2a"
  )
);

// Use this class to interact with the blockchain
export class TokenFaucetInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenFaucetTypes.State> {
    return fetchContractState(TokenFaucet, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeWithdrawEvent(
    options: EventSubscribeOptions<TokenFaucetTypes.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenFaucet.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  subscribeDepositEvent(
    options: EventSubscribeOptions<TokenFaucetTypes.DepositEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenFaucet.contract,
      this,
      options,
      "Deposit",
      fromCount
    );
  }

  subscribeTradeEvent(
    options: EventSubscribeOptions<TokenFaucetTypes.TradeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenFaucet.contract,
      this,
      options,
      "Trade",
      fromCount
    );
  }

  subscribeOwnerUpdatedEvent(
    options: EventSubscribeOptions<TokenFaucetTypes.OwnerUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenFaucet.contract,
      this,
      options,
      "OwnerUpdated",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | TokenFaucetTypes.WithdrawEvent
      | TokenFaucetTypes.DepositEvent
      | TokenFaucetTypes.TradeEvent
      | TokenFaucetTypes.OwnerUpdatedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      TokenFaucet.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getSymbol: async (
      params?: TokenFaucetTypes.CallMethodParams<"getSymbol">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: TokenFaucetTypes.CallMethodParams<"getName">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getName">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: TokenFaucetTypes.CallMethodParams<"getDecimals">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: TokenFaucetTypes.CallMethodParams<"getTotalSupply">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBalanceofTokens: async (
      params?: TokenFaucetTypes.CallMethodParams<"getBalanceofTokens">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getBalanceofTokens">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getBalanceofTokens",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getSelfContractId: async (
      params?: TokenFaucetTypes.CallMethodParams<"getSelfContractId">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getSelfContractId">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getSelfContractId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDeployedContractID: async (
      params?: TokenFaucetTypes.CallMethodParams<"getDeployedContractID">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getDeployedContractID">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getDeployedContractID",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getSelfTokenId: async (
      params?: TokenFaucetTypes.CallMethodParams<"getSelfTokenId">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getSelfTokenId">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getSelfTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getSelfAddress: async (
      params?: TokenFaucetTypes.CallMethodParams<"getSelfAddress">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getSelfAddress">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getSelfAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTargetUtilization: async (
      params?: TokenFaucetTypes.CallMethodParams<"getTargetUtilization">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getTargetUtilization">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getTargetUtilization",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBaseBorrowRate: async (
      params?: TokenFaucetTypes.CallMethodParams<"getBaseBorrowRate">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getBaseBorrowRate">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getBaseBorrowRate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getIssuedTokens: async (
      params?: TokenFaucetTypes.CallMethodParams<"getIssuedTokens">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getIssuedTokens">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getIssuedTokens",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUtilization: async (
      params?: TokenFaucetTypes.CallMethodParams<"getUtilization">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getUtilization">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getUtilization",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getInterest: async (
      params?: TokenFaucetTypes.CallMethodParams<"getInterest">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getInterest">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getInterest",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBlockTimeStamp: async (
      params?: TokenFaucetTypes.CallMethodParams<"getBlockTimeStamp">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getBlockTimeStamp">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getBlockTimeStamp",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAccruedInterest: async (
      params?: TokenFaucetTypes.CallMethodParams<"getAccruedInterest">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getAccruedInterest">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getAccruedInterest",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLastBlockTimeStamp: async (
      params?: TokenFaucetTypes.CallMethodParams<"getLastBlockTimeStamp">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getLastBlockTimeStamp">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getLastBlockTimeStamp",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPrice: async (
      params: TokenFaucetTypes.CallMethodParams<"getPrice">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getPrice">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getPrice",
        params,
        getContractByCodeHash
      );
    },
    getBuyPrice: async (
      params: TokenFaucetTypes.CallMethodParams<"getBuyPrice">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getBuyPrice">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getBuyPrice",
        params,
        getContractByCodeHash
      );
    },
    getSellPrice: async (
      params: TokenFaucetTypes.CallMethodParams<"getSellPrice">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getSellPrice">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getSellPrice",
        params,
        getContractByCodeHash
      );
    },
    getSupply: async (
      params: TokenFaucetTypes.CallMethodParams<"getSupply">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getSupply">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getSupply",
        params,
        getContractByCodeHash
      );
    },
    getBalance: async (
      params: TokenFaucetTypes.CallMethodParams<"getBalance">
    ): Promise<TokenFaucetTypes.CallMethodResult<"getBalance">> => {
      return callMethod(
        TokenFaucet,
        this,
        "getBalance",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends TokenFaucetTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenFaucetTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TokenFaucet,
      this,
      calls,
      getContractByCodeHash
    )) as TokenFaucetTypes.MultiCallResults<Calls>;
  }
}
