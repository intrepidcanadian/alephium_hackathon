/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  ExecutableScript,
  ExecuteScriptParams,
  ExecuteScriptResult,
  Script,
  SignerProvider,
  HexString,
} from "@alephium/web3";
import { default as BuySharesScriptJson } from "../scripts/BuyShares.ral.json";
import { default as DepositScriptJson } from "../scripts/Deposit.ral.json";
import { default as SellSharesScriptJson } from "../scripts/SellShares.ral.json";
import { default as SetBorrowRateScriptJson } from "../scripts/SetBorrowRate.ral.json";
import { default as SetProtocolFeePercentScriptJson } from "../scripts/SetProtocolFeePercent.ral.json";
import { default as SetTargetUtilizationScriptJson } from "../scripts/SetTargetUtilization.ral.json";
import { default as UpdateScriptJson } from "../scripts/Update.ral.json";
import { default as UpdateDefiOwnerScriptJson } from "../scripts/UpdateDefiOwner.ral.json";
import { default as WithdrawScriptJson } from "../scripts/Withdraw.ral.json";

export const BuyShares = new ExecutableScript<{
  subject: Address;
  amount: bigint;
  totalPayment: bigint;
  borrowing: HexString;
}>(Script.fromJson(BuySharesScriptJson));
export const Deposit = new ExecutableScript<{
  token: HexString;
  amount: bigint;
}>(Script.fromJson(DepositScriptJson));
export const SellShares = new ExecutableScript<{
  subject: Address;
  amount: bigint;
  borrowing: HexString;
}>(Script.fromJson(SellSharesScriptJson));
export const SetBorrowRate = new ExecutableScript<{
  feePercent: bigint;
  borrowing: HexString;
}>(Script.fromJson(SetBorrowRateScriptJson));
export const SetProtocolFeePercent = new ExecutableScript<{
  feePercent: bigint;
  borrowing: HexString;
}>(Script.fromJson(SetProtocolFeePercentScriptJson));
export const SetTargetUtilization = new ExecutableScript<{
  targetPercent: bigint;
  borrowing: HexString;
}>(Script.fromJson(SetTargetUtilizationScriptJson));
export const Update = new ExecutableScript<{ token: HexString }>(
  Script.fromJson(UpdateScriptJson)
);
export const UpdateDefiOwner = new ExecutableScript<{
  newOwner: Address;
  borrowing: HexString;
}>(Script.fromJson(UpdateDefiOwnerScriptJson));
export const Withdraw = new ExecutableScript<{
  token: HexString;
  amount: bigint;
}>(Script.fromJson(WithdrawScriptJson));
