/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as SubjectSharesContractJson } from "../SubjectShares.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace SubjectSharesTypes {
  export type Fields = {
    subjectSharesBalanceTemplateId: HexString;
    subject: Address;
    friendContractId: HexString;
    subjectOwnBalance: bigint;
    supply: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBalance: {
      params: CallContractParams<{ holder: Address }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  SubjectSharesInstance,
  SubjectSharesTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as SubjectSharesTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      FriendContractAllowedOnly: BigInt(0),
      NotEnoughBalance: BigInt(1),
    },
  };

  at(address: string): SubjectSharesInstance {
    return new SubjectSharesInstance(address);
  }

  tests = {
    getSupply: async (
      params: Omit<
        TestContractParams<SubjectSharesTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getSupply", params);
    },
    getBalance: async (
      params: TestContractParams<SubjectSharesTypes.Fields, { holder: Address }>
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBalance", params);
    },
    buy: async (
      params: TestContractParams<
        SubjectSharesTypes.Fields,
        { holder: Address; amount: bigint; subjectFee: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "buy", params);
    },
    sell: async (
      params: TestContractParams<
        SubjectSharesTypes.Fields,
        { seller: Address; amount: bigint; subjectFee: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "sell", params);
    },
  };
}

// Use this object to test and deploy the contract
export const SubjectShares = new Factory(
  Contract.fromJson(
    SubjectSharesContractJson,
    "",
    "390262034f6249e2ded2c2615ffe5cd4990183176bc6c40fe6728a6705c79465"
  )
);

// Use this class to interact with the blockchain
export class SubjectSharesInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<SubjectSharesTypes.State> {
    return fetchContractState(SubjectShares, this);
  }

  methods = {
    getSupply: async (
      params?: SubjectSharesTypes.CallMethodParams<"getSupply">
    ): Promise<SubjectSharesTypes.CallMethodResult<"getSupply">> => {
      return callMethod(
        SubjectShares,
        this,
        "getSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBalance: async (
      params: SubjectSharesTypes.CallMethodParams<"getBalance">
    ): Promise<SubjectSharesTypes.CallMethodResult<"getBalance">> => {
      return callMethod(
        SubjectShares,
        this,
        "getBalance",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends SubjectSharesTypes.MultiCallParams>(
    calls: Calls
  ): Promise<SubjectSharesTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      SubjectShares,
      this,
      calls,
      getContractByCodeHash
    )) as SubjectSharesTypes.MultiCallResults<Calls>;
  }
}
